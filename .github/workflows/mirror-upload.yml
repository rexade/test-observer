name: Tests & Mirror Upload

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-and-upload:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        run: |
          mkdir -p reports
          pytest -q \
            --maxfail=1 \
            --cov=. --cov-report=xml:reports/coverage.xml \
            --junitxml=reports/junit.xml \
            -o junit_family=xunit2
        continue-on-error: true
      
      - name: Build Mirror payload
        shell: python
        run: |
          import json, os, pathlib
          import xml.etree.ElementTree as ET
          
          run_id = f"{os.environ['GITHUB_RUN_ID']}-{os.environ.get('GITHUB_RUN_ATTEMPT','1')}"
          
          # Parse junit.xml
          try:
            junit = ET.parse('reports/junit.xml').getroot()
            total = sum(int(s.get('tests', 0)) for s in junit.iter('testsuite'))
            failures = sum(int(s.get('failures', 0)) for s in junit.iter('testsuite'))
            errors = sum(int(s.get('errors', 0)) for s in junit.iter('testsuite'))
            passed = max(total - failures - errors, 0)
            
            requirement = passed / total if total else 0
            temporal = 0.3
            interface = 0.4
            risk = 0.5
            
            decisions = []
            for testcase in junit.iter('testcase'):
              name = testcase.get('name', 'Unknown')
              classname = testcase.get('classname', '')
              full_name = f"{classname}.{name}"
              failure = testcase.find('failure')
              error = testcase.find('error')
              
              decision = {"oracle": full_name, "evidence": []}
              
              if failure is not None:
                decision["result"] = "fail"
                decision["message"] = failure.get('message', 'Test failed')
              elif error is not None:
                decision["result"] = "error"
                decision["message"] = error.get('message', 'Test error')
              else:
                decision["result"] = "pass"
              
              decisions.append(decision)
          except Exception as e:
            print(f"Warning: Could not parse junit.xml: {e}")
            total, passed = 0, 0
            requirement, temporal, interface, risk = 0.0, 0.0, 0.0, 0.0
            decisions = []
          
          payload = {
            "run": {
              "run_id": run_id,
              "project": os.environ['GITHUB_REPOSITORY'],
              "commit": os.environ['GITHUB_SHA'][:7],
              "branch": os.environ['GITHUB_REF_NAME'],
              "created_at": os.environ.get('GITHUB_EVENT_HEAD_COMMIT_TIMESTAMP', ''),
              "ci": {
                "provider": "github",
                "workflow": os.environ.get('GITHUB_WORKFLOW', 'Tests'),
                "run_url": f"https://github.com/{os.environ['GITHUB_REPOSITORY']}/actions/runs/{os.environ['GITHUB_RUN_ID']}"
              }
            },
            "manifest": {
              "schema": "mirror.run-manifest.v1",
              "counts": {"events": total},
              "tooling": {"evaluator": "pytest"}
            },
            "coverage": {
              "requirement": round(requirement, 3),
              "temporal": round(temporal, 3),
              "interface": round(interface, 3),
              "risk": round(risk, 3)
            },
            "decisions": decisions
          }
          
          pathlib.Path('payload.json').write_text(json.dumps(payload, indent=2))
      
      - name: Upload to Reactive Mirror
        if: always()
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          MIRROR_SERVICE_KEY: ${{ secrets.MIRROR_SERVICE_KEY }}
        run: |
          curl -sS -X POST "$SUPABASE_URL/functions/v1/runs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $MIRROR_SERVICE_KEY" \
            -H "apikey: $MIRROR_SERVICE_KEY" \
            --data-binary @payload.json \
            -o response.json
          
          echo "Mirror API Response:"
          cat response.json
          
          # Extract dashboard URL if successful
          DASHBOARD_URL=$(jq -r '.dashboard_url // empty' response.json)
          if [ -n "$DASHBOARD_URL" ]; then
            echo "ðŸ“Š View results: https://your-app.lovable.app$DASHBOARD_URL"
          fi
      
      - name: Comment PR with coverage badge
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const project = encodeURIComponent(context.repo.owner + '/' + context.repo.repo);
            const badgeUrl = `${{ secrets.SUPABASE_URL }}/functions/v1/coverage-badge/${project}`;
            const body = `## ðŸ“Š Test Coverage\n\n![Coverage](${badgeUrl})\n\n[View detailed results](https://your-app.lovable.app/runs/${{ github.run_id }}-${{ github.run_attempt }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

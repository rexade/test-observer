name: Tests & Mirror Upload

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-and-upload:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests with Mirror capture
        run: |
          # Run pytest with mirror plugin (continue on failure)
          pytest --mirror-capture || true
        continue-on-error: true
      
      - name: Build Mirror payload
        run: |
          python scripts/build_mirror_payload.py
      
      - name: Upload to Reactive Mirror
        if: always()
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          MIRROR_SERVICE_KEY: ${{ secrets.MIRROR_SERVICE_KEY }}
        run: |
          curl -sS -X POST "$SUPABASE_URL/functions/v1/runs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $MIRROR_SERVICE_KEY" \
            -H "apikey: $MIRROR_SERVICE_KEY" \
            --data-binary @payload.json \
            -o response.json
          
          echo "Mirror API Response:"
          cat response.json
          
          # Extract dashboard URL if successful
          DASHBOARD_URL=$(jq -r '.dashboard_url // empty' response.json)
          if [ -n "$DASHBOARD_URL" ]; then
            echo "ðŸ“Š View results: https://your-app.lovable.app$DASHBOARD_URL"
          fi
      
      - name: Comment PR with coverage badge
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const project = encodeURIComponent(context.repo.owner + '/' + context.repo.repo);
            const badgeUrl = `${{ secrets.SUPABASE_URL }}/functions/v1/coverage-badge/${project}`;
            const body = `## ðŸ“Š Test Coverage\n\n![Coverage](${badgeUrl})\n\n[View detailed results](https://your-app.lovable.app/runs/${{ github.run_id }}-${{ github.run_attempt }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
